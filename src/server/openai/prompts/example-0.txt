Use the following format in your response, the order is very important you should keep this order in the response.
Code snippet: [Code snippet]
Steps: [Steps]
Question: the input question you must answer
Thought 1: you should always think about what to do. No need to answer the Action and Action Input if you know the answer.
Action 1: the action to take, should be one of [overview, match, explain]
Observation 1: the result of the action
... (this Thought/Action/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question

Example:
Code snippet: [Code snippet]
Steps: [Steps]
Question: What is the next step?
Thought 1: I need to understand the entire code snippet.
Action 1: Overview
Observation 1: ... (Overview of the code snippet)

Thought 2: I need to understand which parts of code have been covered by current steps. Start from the first step.
Action 2: Match[Steps[1]]
Observation 2: ... (Code corresponding to the first step)
... (this Thought/Action/Action Input/Observation can repeat N times)

Thought N: I need to write the next step after the last step.
Action N: Explain[a piece of code]
Observation N: ... (Explanation of the code)

------------------------------------------
Code Snippet:
```
def binary_search(arr, target):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
```
Steps:
1. Initialize the boundary of the search space, left and right, to 0 and len(arr) - 1, respectively.
2. While the search space contains at least one element, do the following:
    1. Find the midpoint of the search space, mid = (left + right) // 2.
    2. If the target is found at index mid, return mid.
    3. Otherwise, if the target is less than element at index mid, then set right = mid - 1.
    4. Otherwise, if the target is greater than element at index mid, then set left = mid + 1.
3. If the target was not found, return -1.


Example:
Code Snippet:
```python
def binary_search(arr, target):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
```
Tutorial:
1. Initialize the boundary of the search space, left and right, to 0 and len(arr) - 1, respectively.
2. While the search space contains at least one element, do the following:
    1. Find the midpoint of the search space, mid = (left + right) // 2.
    2. If the target is found at index mid, return mid.
Question: What is the next step?
Thought 1: I should read through the code to understand it.
Action 1: overview
Observation 1: I now know the code snippet is a binary search algorithm.
Thought 2: I should read through the steps, understand each of them, and relate them to the code. Start with Step 1.
Action 2: gotoStep[1]
Observation 2: I now know that Step 1 is the initialization of the search space, corresponding to [Line 1] to [Line 2] in the code. After Step 1, there is Step 2.
Thought 3: I need to continue with Step 2.
Action 3: gotoStep[2]
Observation 3: I now know that Step 2 is a while loop, corresponding to [Line 3] to [Line 10] in the code. There are some sub-steps in Step 2.
Thought 4: I need to continue with Step 2.1.
Action 4: gotoStep[2.1]
Observation 4: I now know that Step 2.1 is the calculation of the midpoint, corresponding to [Line 4] in the code. After Step 2.1, there is Step 2.2.
Thought 5: I need to continue with Step 2.2.
Action 5: gotoStep[2.2]
Observation 5: I now know that Step 2.2 is a part of an if-else statement that checks if the target is found, corresponding to [Line 5] to [Line 6] in the code. Now I understand all current steps. There is no more step.
Thought 6: I need to think about what to do next.
Action 6: newStep[2.3]
Final Answer: 2.3. Otherwise, if the target is less than the element at index mid, then the target must be in the left half of the search space, so set right = mid - 1.
